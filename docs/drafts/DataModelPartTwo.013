= Data Model part 2 =
''Introducing links and linksets''

== Intro ==
We have a simple user class, but it's not very interesting.  So, I'm going to create a couple other classes and link them to the user class.

=== Links ===
Links in strongbox are equivalent to a one-one relationship in relational databases.
First thing, I'm going to create a simple Group class to assign users in:
{{{
class Group(Strongbox):
    ID = attr(long, default=None)
    name = attr(str)
}}}

Extemely simple.  I will have to add a property to the User control from the previous entry:
{{{
class User(Strongbox):
    ID = attr(long, default=None)
    name = attr(str)
    passwd = attr(str)
    email = attr(str)
    group = link(Group)
}}}

Notice that the group property is using the LinkInjector() class instead of the Attribute() class.  This says that the group property contains a Group object.

Now, let's use the classes:
{{{
>>> g = Group(name='Admins')
>>> u = User(name='rick', password='test', email='rick@server.com', group=g)
>>> u.group.name
'Admins'
}}}

=== Linksets ===
A Linkset is equivalent to a one-many relationship in relational databases.
So, I'm going to create a Story class to link to the User:
{{{
class User(Strongbox):
    # other User properties
    stories = linkset(forward)

class Story(Strongbox):
    ID = attr(long, default=None)
    title = attr(str)
    content = attr(str)
    author = link(User)

User.__attrs__['stories'].type = Story
}}}
There are a few things to notice:

User has a new property ''stories''.  It is a linkset (one-many join), to the ''forward'' placeholder class.  I actually wanted to link it to Story.  However, since the Story class has not been defined yet, Python would throw a NameError.  So, the ''forward'' placeholder will have to do for now.

Also, Story has a link back to the User object.

Finally, with the line {{{User.__attrs__['stories'].type = Story}}}, we set the type of User.stories to the Story class.  Story has been defined, so Python has no qualms about it.

Now, let's use this bad boy:
{{{
>>> g = Group(name='Admins')
>>> u = User(name='rick', group=g)
>>> u.stories.append(Story(title='TitleOfStory', author=u))
}}}
Notice that we have to set the Story.author property and add it to User.stories.

=== Conclusion ===
[http://techno-weenie.com.mn.sabren.com/gettingstarted/datamodelparttwo.py download this example]
By now, you should have a small data model for an application.  Though you can get more detailed with validation and property settings, there's not a whole lot more to do with strongbox.

Now it's time to worry about where to store these objects.  In the next set of tutorials, we will go over the ["arlo"] module.
