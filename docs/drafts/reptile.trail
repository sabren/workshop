<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="workshop.css"?>
<trail>


<title>placeholder for reptile</title>

<p>reptile is a next-gen sax-based template engine to 
replace zebra (which uses the old xmllib library).</p>

<p>reptile uses a simple RSON data structure. rson is
just <a href="http://json.org/">json</a> but restricted
even further so that: </p>

<pre>
- each element of an array is an object 
- all objects in a given array have the same members (making a table)
</pre>


<hr/>

<todo>clean up this old garbage:</todo>

# this was a version of the tracker.py that used
# arlo... only arlo + zebra is a complete waste 
# of time: you have dicts on the bottom and dicts 
# on the top and you have strongboxes inbetween.
# once we have reptile this will all go away.
# so this is really the file that describes the
# motivation for reptile to replace zebra.

import unittest
class ItemTest(unittest.TestCase):
    def test(self):
        i = Item(name='xyz', value='abc')
        assert i.name == 'xyz'
        assert i.value == 'abc'

"""
The implementation is also straightforward:
"""

from strongbox import Strongbox, attr
class Item(Strongbox):
    """
    I represent an item to be tracked.
    """
    ID = attr(long)
    name = attr(str)
    value = attr(str)


"""
Easy enough?

Now, at this point we're still assuming this will be stored in a
relational database. We can map the class to a table with an arlo
Schema. There's really no direct test for this. It either works or it
doesn't. We just need to define it:
"""

import arlo 
SCHEMA = arlo.Schema({
    Item : "item" ,
})


# use a MockClerk for testing so we don't need a real database:
from arlo import MockClerk

class ItemListTest(unittest.TestCase):
    def setUp(self):
        self.clerk = MockClerk(SCHEMA)
        
    def test_empty(self):
        # it should be empty to begin with:
        self.assertEquals(
            [],
            ItemList().invoke(self.clerk)["items"])
        
    def test_withData(self):
        # but if we add data, we should see that instead:
        abc = self.clerk.store(Item(name="abc", value="xyz"))
        self.assertEquals(
            # only we see it as a plain dictionary,
            # so our template engine can use it:
            [{"ID": abc.ID, "name":"abc", "value":"xyz"}],
            ItemList().invoke(self.clerk)["items"])
        

"""
This is also pretty easy to implement:
"""

import platonic
class ItemList(object):
    def invoke(self, clerk):
        return platonic.Model(
            items=[
                {"ID":it.ID, "name":it.name, "value": it.value }
                for it in clerk.match(Item)
            ])
        

"""
The next two features involve showing an existing
item. One shows it as a page, the other shows it
as a form. In other words, we only need one object
to implement the two pages - we'll just put different
templates on the same model  later. So here's how that
model should look:
"""

class ItemViewTest(unittest.TestCase):
    def test(self):
        clerk = MockClerk(SCHEMA)
        e = clerk.store(Item(name="e", value="mc^2"))

        model = SingleItem().invoke(clerk, ID=e.ID)
        self.assertEquals(e.ID, model["ID"])
        self.assertEquals("e", model["name"])
        self.assertEquals("mc^2", model["value"])


"""
And here's how we implement it:
"""

class SingleItem(object):
    def invoke(self, clerk, ID):
        it = clerk.fetch(Item, ID=ID)
        return {"ID": it.ID, "name":it.name, "value":it.value}
        

"""
As you can see, there's already some duplication here. 

"""

class NewItemViewTest(unittest.TestCase):
    def test(self):
        clerk = MockClerk(SCHEMA)
        e = clerk.store(Item(name="e", value="mc^2"))

        model = SingleItem().invoke(clerk, ID=e.ID)
        self.assertEquals(e.ID, model["ID"])
        self.assertEquals("e", model["name"])
        self.assertEquals("mc^2", model["value"])

</trail>
