(this was originall posted on sabren.net 12/9/01 --MichalWallace)
----

Let's talk stock for a bit, shall we? 
 
There are two schools of thought regarding the stock market. One is the random walk / efficient markets theory: stocks go up and down with no real pattern. You can't beat the market because as soon as new info is available, it gets factored into the price. Your only bet is long term investing. 
 
Then there's the people who say there are patterns, it's not random, and it is possible to make money trading in the short term. 
 
I'm one of those people. 
 
If there are patterns in the system, then it may be possible to exploit them for high returns. Since by definition patterns repeat, it should be possible to exploit the patterns with patterns of our own. And if we can identify a pattern, we can implement it as a computer program. 
 
The biggest hurdle is identifying patterns and strategies for dealing with them. One approach might be to study every book ever written on the stock market, implement each suggestion as a program, and test it to see if it works. This is actually a good idea, but it has some weak spots. 
 
First, we need to define how we test. The best approach I've heard is to paper-trade against past data. If the system consistently loses money, throw it out. If it makes money, it might be good. I say "might" because there's no guarantee that any pattern that existed in the past still exists today. It's also possible that the test was conducted poorly, and the system had information to more data than it should have. (For example, basing today's trade on tomorrow's price. If you have tomorrow's stock prices in real life, forget exploiting patterns and go straight to your broker.) 
 
The second weak spot is the amount of time it takes to research. I'm not a great researcher. I'm not a great stock market analyst. I don't have the experience to sort out the frauds and crackpots from the winners. Clear winners like Warren Buffet tend to be long-term investors... There are technical (short term) investors who are legends in the field - George Soros, for example - but figuring out exactly what they do isn't exactly easy, no matter how many books are out. If it were easy, short-term traders would all be rich. 
 
The third weak spot is that if we limit the search to things that have already been tried, we neglect the much larger set of strategies that have never been tried at all. 
 
So... What if we tried random strategies? If we've got a computer and a strong test environment, we could run random strategies all day long. 
 
Well, we might hit on something that way. But since it's random, it could take an awful long time. One program might show potential, and the next six million programs do nothing at all. 
 
There has to be something besides a brute force test of every possibility. That something is evolution. 
 
Leaving aside whether or not we humans desended from some lower form of life, the theory of evolution has real applications in software. There are techniques like genetic algorithms and genetic programming that can actually breed solutions to problems from a "primordial soup" of random strings. 
 
The key ingredients are sex and murder. Yes, little programs run around mating with each other, creating new programs with instructions from both parents. And of course, if a program doesn't do well, we kill it off before it has a chance to breed. That way, the best instructions spread throughout the gene pool. 
 
Now, all this has been my idea all along when it comes to beating the market. The trouble is, I never knew how to build it. I understood the basics, but a flaw in my thinking kept me from seeing how it could actually be built. 
 
See, ever since I started this project, I thought the fitness function was the accuracy of a buy/sell signal produced by the program. For example, the output of the programs would be a numeric value on a continuum between "strong sell" and "strong buy". If the system issued buy signals and it turned out that buying was a good idea, then the program would be allowed to breed. 
 
But that's dumb! 
 
I only thought that way because the object model I'd created in the prototype forced me to think that way. My system tested indicators, so I went looking for indicators. 
 
But who says indicators are the best way to beat the market? Maybe they're important, but there's probably all sorts of other steps involved... Like choosing the right stocks in the first place, investing the right amounts, and learning how to manage risk. A system that reacts well to events as they happen might be just as useful as a system that predicts prices ten minutes into the future with 70% accuracy. 
 
I now believe the trick is to breed strategies that can do pretty much anything they want, and judge them based on how much money they make after a certain number of tests in different markets. 
 
This presents a problem and an opportunity. The problem is that the test environment becomes much more complex. The opportunity is that we can start with a basic system, and breed strategies with a limited number of options, and slowly add more and more options into the system. Or to put it another way, it's an opportunity to turn the research problem into a modelling problem. 
 
I think that what I'll wind up with is a set of routines that perform certain stock-market related tasks. Get the price of a symbol. Screen for certain stocks. Stop processing until the next tick. Buy. Sell. Place a stop. Etc. These are the services available to the generated code. 
 
The code then becomes much simpler... Just strings of random instructions and data, that the test environment handles. 
 
I originally envisioned the generated code as a sort of lisp-like, tree-based data structure. There's a perl implementation of genetic programming that works that way, and I'd been using it as a conceptual model. 
 
But I think what I really want is an assembly language. Just a stream of bytes with a processor that hops through each one, executing the appropriate instructions. 
 
The weird thing is, I wrote such a processor about three years ago when I was still doing perl and working on an NLP chatbot. It's called GVM - generic virtual machine. 
 
I think it's time to dust off GVM, port it to python, and introduce it to my friend the stock market. :)
