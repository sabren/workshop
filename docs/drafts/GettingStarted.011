= Getting Started with Sixthday =

Welcome!  These are some notes I've been taking while learning how to use the Sixthday modules.  For me, the best way to get to know a module is some example source code... -- RickOlson

== Intro ==

There was one big hurdle for learning the Sixthday python modules.  ''Where do I start?''  The source of [http://www.rantelope.com/ Rantelope] is very abstract.  Most of the work is done in the underlying modules.  So, I find it's best to start from the bottom.  And in most n-tier applications, that would be the Data Abstraction Layer.

== Your Data Model ==

Every application needs a data model.  And that's where ["strongbox"] comes in.  Here are the basic features:

  * You can define classes with static type properties
  * Properties can be validated.  Storing a certain type is enforced.  Validation can also be done against regular expressions.
  * Getters and setters can be used for properties as well

Here's an example of a User object I'm using in one of my apps:

{{{
from strongbox import *
from sha import sha
import storage, base64, MySQLdb, arlo

class User(Strongbox):
	ID = attr(long, default=None)
	name = attr(str)
	passwd = attr(str)
	email = attr(str)

	def set_password(self, value):
		self.passwd = base64.encodestring(sha(value).digest())
	def get_password(self):
		raise ValueError, "passwords are encrypted"
	def isPassword(self, value):
		return self.passwd == base64.encodestring(sha(value).digest())
}}}

Notice this class has 4 properties: ID, name, passwd, email.  These will later map to a database using ["arlo"], but I don't want to get ahead of myself.  Some important things to note:

  * ID will be the primary key.  When the ["storage"] module performs updates and fetches, it uses the ID field exclusively.  Not Id, id, but ID.
  * Notice the get and set methods for password.  The set method will automatically generate a secure hash of the password.  
  * attr is actually calling an instance of the Attribute class (from the strongbox.Attribute module).  If you look at the strongbox module source, it imports the class as the name 'attr.'

Here's how one would use the User class:
{{{
# two ways to create an instance:
>>> u = User()
>>> u.name = 'rick'
>>> u.email = 'email@server.com'
>>> u.password = '1234'
# or, a one line version:
>>> u = User(name='rick', email='email@server.com', password='1234')
}}}

Here's a look at the method signature of Attribute's constructor:
{{{
def __init__(self, typ, okay=None, default=Notgiven, allowNone=1)
}}}
  * The first parameter is the type.  (int, str, long, float, and DateTimeType if you've imported the mx.DateTime module are all valid types)
  * okay is the validation parameter.  You can pass it a regular expression, a function, a list, etc.
  * default and allowNone are pretty self explanatory
