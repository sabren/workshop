= Ordering of Elements in XmlSerializer =

The first issue with XmlSerializer's default configuration is that it seems to put the elements in a random order.  To set a custom order, you need to pass an xml map to the serialize() method.  

In .Net, the XmlSerializer uses [http://msdn.microsoft.com/library/default.asp?url=/library/en-us/csref/html/vclrfcsharpattributes.asp attributes] to specify custom settings.  Since python does not have the concept of attributes, we'll use a python dictionary instead.

== Add the Xml Maps ==

We will modify the previous example and add the Xml maps.  The Xml maps can optionally have a magic ''__order__'' key to set a custom order, with a tuple of property names as the value.  This property sets the order that they appear in the xml file, and can also be used to selectively show some properties and hide others.

Once the map is created, pass it once to the serialize() method for each class (Person and Manager in this example).
{{{
import xmlserializer

# notice that for Issue, I skipped the comicbook parent property that would have created an infinite loop
# also, even though i list the 'volume' property twice, it only shows it once
xmlserializer.addMapping(Issue, {'__order__':('volume', 'number', 'volume', 'releasedate')})
xmlserializer.addMapping(ComicBook, {'__order__':('title', 'publisher', 'issues')})

p = Publisher()
p.name = 'Marvel Comics'

cb = ComicBook()
cb.title = 'Amazing Spider-Man'
cb.publisher = p

i1 = Issue()
i1.volume = 1
i1.number = 500
i1.releasedate = Date(2003, 11, 15)

i2 = Issue()
i2.volume = 1
i2.number = 501
i2.releasedate =  Date(2003, 12, 16)

cb.issues.append(i1)
cb.issues.append(i2)

print xmlserializer.serialize(cb)
}}}

== See the Results ==
Here are the XML results:
{{{
<?xml version="1.0" ?>
<ComicBook>
  <title>Amazing Spider-Man</title>
  <Publisher>
    <name>Marvel</name>
  </Publisher>
  <issues>
    <Issue>
      <volume>1</volume>
      <number>500</number>
      <releasedate>2003-11-15T00:00:00-05:00</releasedate>
    </Issue>
    <Issue>
      <volume>1</volume>
      <number>501</number>
      <releasedate>2003-12-16T00:00:00-05:00</releasedate>
    </Issue>
  </issues>
</ComicBook>
}}}

== Element Names ==

Now we have the ordering out of the way.  So, let's see how to configure the XmlSerializer property names: XmlSerializerNames.
