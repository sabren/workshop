= weblib.Sess =

== overview ==
The sess object is modeled after the Session class from the PHP Base Libraries. 

HTTP is a stateless protocol. This means the web server forgets about the browser after every request. That's nice for web servers, but not so nice for people writing interactive websites. Luckily, the HTTP protocol allows browsers at least two ways to "remind" the server that its dealing with the same browser: cookies and the url query string. The sess object makes use of one or both of these methods to allow variables to persist from page to page.

For example, if a user logs in as "Fred" you can set sess["name"]="Fred" on one page, and sess will automatically remember Fred's name for every other page in your application. 

== methods == 

abandon() - abandons the current session 
url([oldurl]) - returns oldurl (a string), but with the sessionID embedded in it. 
start([sid]) - called at start of page.. If sid is given, it will use that session ID, otherwise, it tries to get the session id from the response object, or, failing that, creates a new one. Except for test purposes, sid should probably be left blank.

  freeze() - called at end of page 
  thaw() - this should probably be a private method.. 


== attributes == 
  sid - the session ID 
  mode - "cookie" or "get", usually "cookie" 
  fallbackMode - usually "get" 
  lifetime - in minutes 
  gcProb - probability of clearing out old sessions. 
  gcTime - time, in minutes, before a session is considered "old" and ready to be garbage collected. Note that this should be greater than or equal to lifetime. 

== dictionary interface ==

sess is a dictionary style object, and therefore provides has_key(), keys(), values(), and uses the standard python syntax for dictionaries: 

{{{
x = sess[key]
}}}

== notes ==
If you use the wrapper class, start() and freeze(), will be called for you.

Data for sess is serialized via pickle and stored in a sesspool.

