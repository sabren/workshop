<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="workshop.css"?>
<trail xmlns:html="http://www.w3.org/1999/html">


<title>a generic record editor</title>

<todo>put zebra code inline</todo>

<goal>a generic user interface for tables and fields</goal>

<p>So now we're going to start a new web app. Let's make a bug
tracker. Basically, we want a list of bugs, and we want a few extra
attributes on them, and we'd like to add two more tables: one for
categories and one for users.</p>

<p>Building that item tracker wasn't too much work, and this is pretty
much the same kind of thing, just with more fields and tables. Heck,
we could even copy and paste. Lots of people do that kind of
thing.</p>

<p>But let's not. There's no point just writing the same app over and
over again. We won't learn much that way, and we'd just be setting
ourselves up for a lot of duplication and grunt work.</p>

<p>What are we really talking about? We have a bunch of tables, and we
want to add, edit, and delete a bunch of records in those
tables. Other than defining the fields, all of this is grunt work and
there's no reason we should have to do it ourselves.</p>

<p>Look at SQL itself. We don't have to hack the MYSQL code every time we
want to add a new table. We just define a new table with CREATE
TABLE. At that point, the database knows how to deal with it through a
generic mechanism: insert, update, replace, delete, and select
statements.  So MYSQL is a data driven application.</p>


<p>The distinction may be subtle. Basically, we don't tell mysql HOW
to do anything. We only tell it WHAT we want, and mysql does the
rest.</p>

<p>So why can't things be that easy for our web apps? The web app
really maps to this same set of concepts:</p>

<pre>
<ul>
<li>create table = define the fields</li>
<li>insert/update or replace = "save" form handler</li>
<li>select = list all and show/edit one pages</li>
<li>delete = delete form handler</li>
</ul>
</pre>

<p>If the database can do all this in a generic way, why
couldn't we?</p>

<p>Well, what would we need?</p>

<p>Well, we'd need a list of tables, and a list of 
fields in that table. We already have that with 
storage, so now we just need the list of tables 
and fields.</p>

<p>then what? Well we could show the list of tables.
then we could show all the fields in the table.
then we could click a row to show the detail
or click add new or edit to edit a row.</p>

<p>Really this would give us a whole lot of potential
web apps all at once. They'd look kind of plain
but if we left the door open for templates...</p>

<p>Let's see if we can modify our tracker in place.
First let's add a fake table list. We can fill this
in later, but</p>


<todo>get this from pysqlite</todo>
<pre>
from tracker import *
def listTables(STOR):
    cur = STOR.dbc.cursor()
    cur.execute("SELECT name FROM SQLITE_MASTER where type='table'")
    return dict(tables=[dict(table=r[0]) for r in cur.fetchall()])
    return dict(tables=[dict(table=ITEM_TABLE)])

TrackerApp.QUERIES["tables"]=[listTables, "tables.zb"]
</pre>


<p>Now we need fields.</p>

<p>What we need to do is format the data in 
such a way that zebra can report on it.</p>

<p>we have a list of dicts, but since we're 
being generic here we need to turn each row 
into a list of dicts... </p>

<goal>column names</goal>


<p>okay... this is a huge complicated mess and it should just live in
the storage module. basically pysqlite dosen't give you any way to get
the column names for an empty table (as far as i can tell) ... you can
use the cur.description attribute after a select once you have data in
the table, but if there are no rows, then the .description is None</p>

<p>another option would be to parse the CREATE TABLE
statement ourselves -it is available in the SQLITE_MASTER
table, but that would require going into parsers... </p>

<p>the simplest alternative is to define the schema in python,
and then generate the create table statements from that,
since that's pretty standard from database to database.</p>

<p>also, it leads naturally into the strongbox idea...</p>


<pre>
SCHEMA = {
    ITEM_TABLE: ['ID', 'name', 'value'], 
}
</pre>


<todo>make this part of storage:</todo>
<pre>
# wouldn't hurt to cache the results, either
def columns(tableName):
    return SCHEMA[tableName]
    
def rows(STOR, table):
    
    columnNames = columns(table)
    
    return dict(
        table=table,
        cols=[dict(col=c) for c in columnNames],
        rows=[dict(vals=[dict(val=r[c]) for c in columnNames])
              for r in STOR.match(ITEM_TABLE)])
                 
TrackerApp.QUERIES["rows"]=[rows, "rows.zb"]
</pre>


<p>now we can add in a generic way:</p>

<todo>items should use these generic names, so we can replace them </todo>

<pre>
def new(table):
    return dict(
        new=True,
        table=table,
        fields=[dict(name=name, value='') for name in SCHEMA[table]])

TrackerApp.QUERIES["new"]=[new, "form.zb"]


# edit is almost exactly the same:
# @todo: extract single method... common logic:
def edit(STOR, table, ID):
    vals = STOR.fetch(table, ID=ID)
    return dict(
        new=True,
        table=table,
        fields=[dict(name=name, value=vals[name]) for name in SCHEMA[table]])
</pre>

<p>how do we write a generic save routine?
STOR.store is already generic... we just need to
know which values to pass in.
</p>

<p>we could either do **xx or REQ <todo>implement **for platonic</todo></p>

<p>it doesn't really matter. let's do REQ</p>

<pre>
def save(STOR, REQ, table, ID):
    if ID:
        cleanID = long(ID)
    else:
        cleanID = None

    vals = {}
    for col in SCHEMA[table]:
        if col != "ID":
            vals[col] = REQ.get(col)
    STOR.store(table, ID=cleanID, **vals)
</pre>

<todo>
how to go back to the correct table page??
maybe commands should return a model as well for the redirect
and we could do rows&amp;table=%(toble)s or a lambda or
something here....

hmm.that's not platonic. the model would have to come
directly from the request i think... 
</todo>

<pre>
TrackerApp.COMMANDS["save"]=[save, "tables"]

def delete(STOR, table, ID):
    cleanID = long(ID)
    STOR.delete(table, ID=cleanID)

TrackerApp.COMMANDS["delete"]=[save, "tables"]
</pre>


<todo>
still to do for buggernaut
--------------------------
add str field for users
add str field for area/role
custom view
generate create table statements from schema
with that, this code is sufficient for buggernaut 1.0m
</todo>

</trail>
