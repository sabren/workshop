These are the tags used by ["zebra"]. I call them tags because
they correspond to xml tags, but I usually use the "outline"
syntax, since it's more concise and jives better with python.

== zebra ==

Top level XML tag. Not required for outline mode.

== if .. el .. ef ==

If / else / else-if.

outline mode:

{{{
This is normal text.
* if 1==2:
    This should never show up.
* el:
This line isn't part of the else.
}}}

converts to:

{{{
<?xml version="1.0"?>
<zebra>
This is normal text.
<if condition="1==2">
This should never show up.
</if>
<el>
</el>
This line isn't part of the else.
</zebra>
}}}


== for, head, body, tail, none ==

This is the main reporting construct. It's basically
a "foreach" loop across a tabular data structure.

"Body" is a meaningless tag to make the indentation look pretty.
"Head" and "tail" are for headers and footers. "None"
prints when the list is empty (instead of head/body/foot).

{{{
* for people:
    * head:
        Here are some names!
        <ul>
    * body:
        <li>{:lname:}, {:fname:}</li>
    * tail:
        </ul>
    * none:
        I don't know anybody.
}}}

== var ==
<var> is the XML for the outline-mode {??} operator. Eg:

{{{
{?x?}
}}}

converts to:

{{{
<var>x</var>
}}}

If x is defined, <var>x</var> shows up as the value of x.
If x is not defined, nothing happens (compare this to <xpr>)

== xpr ==

Same as var, except:

   * looks like {:x:} in outline mode
   * x can be any valid python expression (???)
   * if x is not defined, an error gets thrown


== exec ==

Run arbitrary python code. Try not to use it.

{{{
* exec:
    import whatever
    x = whatever.doSomething()
* show:
    The answer was {:x:}.
}}}

== rem ==

A comment. Probably not too useful in xml mode. In outline mode,
it looks like #... Eg:

{{{
*# this is a comment.
}}}


== include ==

{{{
* include includefile;
}}}

converts to:

{{{
<?xml version="1.0"?>
<zebra>
<include file="includefile"/>
</zebra>
}}}

