@TODO: this page describes the sixthday project itself.. It really ought to describe the sixthday ''package'', which is touched on briefly at the bottom... -- MichalWallace

---


The sixthday web architecture is a pretty simple 3-tier model:

  * '''Data Layer'''
    * '''Storage:''' Data gets stored in tables using a simple relational model. Usually these tables are in MySQL or another RDBMS, but they don't have to be - any format capable of describing tables (eg, text files, metakit, xml, etc) is fine.
    * '''Data Classes:''' The Zike Data Classes (zdc)
          provide an abstraction layer on top of the tables. Basically,
          you define a subclass of zdc.RecordObject for each major
          table that describes your business rules, and RecordObject
          takes care of the actual loading and saving of data.
          There are also utility classes to define table relationships
          (eg, LinkSet for simple 1:* joins, Junction for *:* junction
          tables, etc)

  * '''Application Layer:'''
        Generally, your actual web applications
        are subclasses of weblib.Actor. Actors are scripts that can
        do different things based on actions passed in on the URL.
        Because Actors are python objects, you can reuse them
        independently of the web (eg, in a GUI app), or on the
        web but independent of a browser (ie, via SOAP or XML-RPC).

  * '''Presentation Layer:'''
    * '''Views:''' For each page that is to be displayed, your
            application generates a data view, which is a dictionary
            whose keys are strings and whose values are either
            strings, other views, or lists of views. This is similar to
            a lightweight DOM, and in fact, it is trivial to render
            views as XML.
       * '''Zebra:''' Zebra is a template language that can easily
            generate HTML, text, or whatever else based on data views.
            Zebra allows you to mix generated output with python code.
            It also provides higher level reporting functions like
            headers, footers, and sorting. Zebra has two syntaxes,
            depending on your needs: either an XML syntax for easy
            integration with other tools, or a python-style outline
            syntax for high readability.
    *  '''XSLT:''' If zebra isn't enough for you (or too much for you),
            you can choose to code your display logic in XSLT instead.
            One powerful approach is to use zebra's higher level
            operations to quickly rearrange the data view, and then
            fine tune the output using XSLT. Or you can use XSLT
            directly  off the data view.

Note that you don't have to do things this way. If you prefer straight scripts that talk directly to a database via SQL, you can do that too. Just grab weblib and the python DB-API and jump right in. Want to use Zebra or ZDC outside of the web? You can do that! Want to mix and match, or focus on learning one at a time? No problem! Prefer another template system to zebra? Fine by me. The weblib, zebra, and zdc packages are completely separate and can be downloaded, installed, learned, and used completely independently.

If you do decide to write your apps using the unified architecture, then you'll want to take a look at the sixthday package, which defines some useful classes such as Node, Content, User, UserAuth (for authentication). Sixthday also provides some useful Actors, like a user signup system, and tools for editing data objects through a form, and even several full web applications complete with templates which you can customize.
