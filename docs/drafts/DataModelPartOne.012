= Data Model part 1 =
''a simple class using ["strongbox"]''

== Intro ==

Every application needs a data model.  And that's where ["strongbox"] comes in.  Here are the basic features:

  * You can define classes with static type properties
  * Properties can be validated.  Storing a certain type is enforced.  Validation can also be done against regular expressions.
  * Getters and setters can be used for properties as well

== Defining the Class ==

Here's an example of a User object I'm using in one of my apps:
{{{
from strongbox import *
from sha import sha
import base64

class User(Strongbox):
	ID = attr(long, default=None)
	name = attr(str)
	passwd = attr(str)
	email = attr(str)

	def set_password(self, value):
		self.passwd = base64.encodestring(sha(value).digest())
	def get_password(self):
		raise ValueError, "passwords are encrypted"
	def isPassword(self, value):
		return self.passwd == base64.encodestring(sha(value).digest())
}}}
[http://techno-weenie.com.mn.sabren.com/gettingstarted/datamodelpartone.py download this example]

Notice this class has 4 properties: ID, name, passwd, email.  These will later map to a database using ["arlo"], but I don't want to get ahead of myself.  Some important things to note:

  * ID will be the primary key.  When the ["storage"] module performs updates and fetches, it uses the ID field exclusively.  Not Id, id, but ID.
  * Notice the get and set methods for password.  The set method will automatically generate a secure hash of the password.  
  * attr is actually calling an instance of the Attribute class (from the strongbox.Attribute module).  If you look at the strongbox module source, it imports the class as the name 'attr.'

== Using the Class ==

Here's how one would use the User class:
{{{
# two ways to create an instance:
>>> u = User()
>>> u.name = 'rick'
>>> u.email = 'email@server.com'
>>> u.password = '1234'
# or, a one line version:
>>> u = User(name='rick', email='email@server.com', password='1234')
}}}

Here's a look at the method signature of Attribute's constructor:
{{{
def __init__(self, typ, okay=None, default=Notgiven, allowNone=1)
}}}
  * The first parameter is the type.  (int, str, long, float, and DateTimeType if you've imported the mx.DateTime module are all valid types)
  * okay is the validation parameter.  You can pass it a regular expression, a function, a list, etc.
  * default and allowNone are pretty self explanatory

[DataModelPartTwo Data Model Part Two >>]

----
GettingStarted
