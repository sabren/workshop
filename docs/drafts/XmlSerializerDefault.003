= XmlSerializer Default Mode =

The default XmlSerializer mode will use the strongbox class name as the root element, and each attribute as an XML node under the root.  There are options available to specify the ordering of attributes, the element names, node types, etc.  But, we'll start with a real simple example:

== Define the classes ==

First, let's define the strongbox classes for our data model.

{{{
from strongbox import *
class Person(Strongbox):
    name = attr(str)
    age  = attr(int)
    hobbies = linkset(str)

class Manager(Person):
    boss = link(forward)
    subordinates = linkset(Person)
Manager.__attrs__['boss'].type = Manager
}}}

== Fill the Data ==
It can be serialized with the following code:
{{{
import xmlserializer

bob = Person()
bob.name = 'bob'
bob.age = 20
bob.hobbies.append('baseball')
bob.hobbies.append('cars')

alice = Person()
alice.name = 'alice'
alice.age = 21
alice.hobbies.append('stamps')

jane = Manager()
jane.name = 'jane'
jane.age = 26

fred = Manager()
fred.name = 'fred'
fred.age = 25
fred.hobbies.append('golf')
fred.hobbies.append('tennis')
fred.subordinates.append(bob)
fred.subordinates.append(alice)
fred.boss = jane

print xmlserializer.serialize(bob)
print xmlserializer.serialize(alice)
print xmlserializer.serialize(jane)
print xmlserializer.serialize(fred)
}}}

== See the Results ==
Here are the XML results:
{{{
<?xml version="1.0" ?>
<Person>
  <age>20</age>
  <name>bob</name>
  <hobbies_array>
    <hobbies_item>baseball</hobbies_item>
    <hobbies_item>cars</hobbies_item>
  </hobbies_array>
</Person>

<?xml version="1.0" ?>
<Person>
  <age>21</age>
  <name>alice</name>
  <hobbies_array>
    <hobbies_item>stamps</hobbies_item>
  </hobbies_array>
</Person>

<?xml version="1.0" ?>
<Manager>
  <subordinates_array>
  </subordinates_array>
  <age>26</age>
  <name>jane</name>
  <hobbies_array>
  </hobbies_array>
</Manager>

<?xml version="1.0" ?>
<Manager>
  <subordinates_array>
    <subordinates_item>
      <age>20</age>
      <name>bob</name>
      <hobbies_array>
        <hobbies_item>baseball</hobbies_item>
        <hobbies_item>cars</hobbies_item>
      </hobbies_array>
    </subordinates_item>
    <subordinates_item>
      <age>21</age>
      <name>alice</name>
      <hobbies_array>
        <hobbies_item>stamps</hobbies_item>
      </hobbies_array>
    </subordinates_item>
  </subordinates_array>
  <age>25</age>
  <boss>
    <subordinates_array>
    </subordinates_array>
    <age>26</age>
    <name>jane</name>
    <hobbies_array>
    </hobbies_array>
  </boss>
  <name>fred</name>
  <hobbies_array>
    <hobbies_item>golf</hobbies_item>
    <hobbies_item>tennis</hobbies_item>
  </hobbies_array>
</Manager>
}}}

== A Couple Observations ==

 * Attributes are serialized in a seemingly random order
 * Linkset elements have the suffix ''_array'' or ''_item'' appended to the name
 * All properties are rendered as elements.  What about attributes?

Now, let's see about reordering them: XmlSerializerOrder.
